{"version":3,"sources":["../../src/utils/security.js"],"names":["getPermissions","user","schema","accessKeys","roles","reduce","permissions","role","rolePermissions","ALL","mergedAccesses","accessKey","prevPermission","curPermission","all","curPermissionKeys","Object","keys","forEach","some","curPermKey","prevPermKey","mergedAccess","modifierKey","prevModifier","curModifier","mergedModifier"],"mappings":";;;;;;;;;;;;AAAO,IAAMA,0CAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAOC,MAAP,EAAiC;AAAA,oCAAfC,UAAe;AAAfA,cAAe;AAAA;;AAE7D,SAAOF,KAAKG,KAAL,CAAWC,MAAX,CAAkB,UAACC,WAAD,EAAcC,IAAd,EAAuB;;AAE9C,QAAMC,kBAAkBN,OAAOK,IAAP,KAAgBL,OAAOO,GAAvB,IAA8B,EAAtD;AACA,QAAMC,iBAAiBP,WAAWE,MAAX,CAAkB,UAACK,cAAD,EAAiBC,SAAjB,EAA+B;;AAEtE,UAAMC,iBAAiBN,YAAYK,SAAZ,CAAvB;AACA,UAAIE,gBAAgBL,gBAAgBG,SAAhB,KAA+BJ,SAAS,OAAT,IAAoB,IAAnD,IAA4DC,gBAAgBM,GAA5E,IAAmF,KAAvG;AACA,UAAKF,kBAAkBC,kBAAkB,KAArC,IAA+CD,mBAAmB,IAAtE,EAA4E,OAAOF,cAAP;;AAE5E,UAAI,QAAQG,aAAR,yCAAQA,aAAR,OAA2B,QAA/B,EAAyC;;AAEvC;AACA;AACA,YAAME,oBAAoBC,OAAOC,IAAP,CAAYJ,aAAZ,CAA1B;AACAD,0BAAkBI,OAAOC,IAAP,CAAYL,cAAZ,EAA4BM,OAA5B,CAAoC,uBAAe;AACnE,cAAI,CAACH,kBAAkBI,IAAlB,CAAuB;AAAA,mBAAcC,eAAeC,WAA7B;AAAA,WAAvB,CAAL,EAAuE;AACrER,0BAAcQ,WAAd,IAA6B,KAA7B;AACD;AACF,SAJiB,CAAlB;;AAMAR,wBAAgBG,OAAOC,IAAP,CAAYJ,aAAZ,EAA2BR,MAA3B,CAAkC,UAACiB,YAAD,EAAeC,WAAf,EAA+B;;AAE/E,cAAMC,eAAeF,gBAAgBA,aAAaC,WAAb,CAArC;AACA,cAAIE,cAAcZ,cAAcU,WAAd,CAAlB;;AAEA,cAAIC,iBAAiB,KAArB,EAA4B,OAAOF,YAAP;AAC5B,cAAI,OAAQG,WAAR,KAAyB,UAA7B,EAAyCA,cAAcA,YAAYxB,IAAZ,CAAd;;AAEzC,cAAIyB,uBAAJ;AACA,yBAAgBD,WAAhB,yCAAgBA,WAAhB;AACE,iBAAK,QAAL;AACEC,4CAAsBF,YAAtB,EAAuCC,WAAvC;AACA;AACF,iBAAK,QAAL;AACEC,+BAAiB,MAAGF,eAAeA,eAAe,GAA9B,GAAoC,EAAvC,IAA8CC,WAA/D;AACA;AACF;AACEC,+BAAiBD,WAAjB;AARJ;;AAWA,8BAAYH,YAAZ,sBAA2BC,WAA3B,EAAyCG,cAAzC;AAED,SAtBe,EAsBbd,kBAAkB,EAtBL,CAAhB;AAwBD;;AAED,0BAAYF,cAAZ,sBAA6BC,SAA7B,EAAyCE,aAAzC;AAED,KA7CsB,EA6CpB,EA7CoB,CAAvB;AA8CA,wBAAYP,WAAZ,EAA4BI,cAA5B;AACD,GAlDM,EAkDJ,EAlDI,CAAP;AAoDD,CAtDM","file":"security.js","sourcesContent":["export const getPermissions = (user, schema, ...accessKeys) => {\r\n\r\n  return user.roles.reduce((permissions, role) => {\r\n\r\n    const rolePermissions = schema[role] || schema.ALL || {};\r\n    const mergedAccesses = accessKeys.reduce((mergedAccesses, accessKey) => {\r\n\r\n      const prevPermission = permissions[accessKey];\r\n      let curPermission = rolePermissions[accessKey] || (role === \"ADMIN\" && true) || rolePermissions.all || false;\r\n      if ((prevPermission && curPermission === false) || prevPermission === true) return mergedAccesses;\r\n\r\n      if (typeof (curPermission) === \"object\") {\r\n\r\n        // Absense of previous modifier indicates that access has been extended by this particular modifier\r\n        // Setting missing modifier to false\r\n        const curPermissionKeys = Object.keys(curPermission);\r\n        prevPermission && Object.keys(prevPermission).forEach(prevPermKey => {\r\n          if (!curPermissionKeys.some(curPermKey => curPermKey === prevPermKey)) {\r\n            curPermission[prevPermKey] = false;\r\n          }\r\n        });\r\n\r\n        curPermission = Object.keys(curPermission).reduce((mergedAccess, modifierKey) => {\r\n\r\n          const prevModifier = mergedAccess && mergedAccess[modifierKey];\r\n          let curModifier = curPermission[modifierKey];\r\n\r\n          if (prevModifier === false) return mergedAccess;\r\n          if (typeof (curModifier) === \"function\") curModifier = curModifier(user);\r\n\r\n          let mergedModifier;\r\n          switch (typeof (curModifier)) {\r\n            case \"object\":\r\n              mergedModifier = { ...prevModifier, ...curModifier };\r\n              break;\r\n            case \"string\":\r\n              mergedModifier = `${prevModifier ? prevModifier + \" \" : \"\"}` + curModifier;\r\n              break;\r\n            default:\r\n              mergedModifier = curModifier;\r\n          }\r\n\r\n          return { ...mergedAccess, [modifierKey]: mergedModifier };\r\n\r\n        }, prevPermission || {});\r\n\r\n      }\r\n\r\n      return { ...mergedAccesses, [accessKey]: curPermission };\r\n\r\n    }, {});\r\n    return { ...permissions, ...mergedAccesses };\r\n  }, {});\r\n\r\n};"]}